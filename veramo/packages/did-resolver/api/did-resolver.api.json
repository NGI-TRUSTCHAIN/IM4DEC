{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.36.3",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@veramo/did-resolver!",
  "docComment": "/**\n * Provides a {@link @veramo/did-resolver#DIDResolverPlugin | plugin} for the {@link @veramo/core#Agent} that implements {@link @veramo/core-types#IResolver} interface.\n *\n * @packageDocumentation\n */\n",
  "name": "@veramo/did-resolver",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@veramo/did-resolver!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "@veramo/did-resolver!DIDResolverPlugin:class",
          "docComment": "/**\n * A Veramo Plugin that enables users to resolve DID documents.\n *\n * This plugin is used automatically by plugins that create or verify Verifiable Credentials or Presentations or when working with DIDComm\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class DIDResolverPlugin implements "
            },
            {
              "kind": "Reference",
              "text": "IAgentPlugin",
              "canonicalReference": "@veramo/core-types!IAgentPlugin:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "src/resolver.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "DIDResolverPlugin",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@veramo/did-resolver!DIDResolverPlugin:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `DIDResolverPlugin` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        resolver?: "
                },
                {
                  "kind": "Reference",
                  "text": "Resolvable",
                  "canonicalReference": "did-resolver!Resolvable:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    } | {\n        [didMethod: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "DIDResolver",
                  "canonicalReference": "did-resolver!DIDResolver:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@veramo/did-resolver!DIDResolverPlugin#getDIDComponentById:member(1)",
              "docComment": "/**\n * {@inheritDoc @veramo/core-types#IResolver.getDIDComponentById}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDIDComponentById({ didDocument, didUrl, section, }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        didDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "DIDDocument",
                  "canonicalReference": "did-resolver!DIDDocument:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        didUrl: string;\n        section?: "
                },
                {
                  "kind": "Reference",
                  "text": "DIDDocumentSection",
                  "canonicalReference": "@veramo/core-types!DIDDocumentSection:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "VerificationMethod",
                  "canonicalReference": "did-resolver!VerificationMethod:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ServiceEndpoint",
                  "canonicalReference": "did-resolver!ServiceEndpoint:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ didDocument, didUrl, section, }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getDIDComponentById"
            },
            {
              "kind": "Property",
              "canonicalReference": "@veramo/did-resolver!DIDResolverPlugin#methods:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly methods: "
                },
                {
                  "kind": "Reference",
                  "text": "IResolver",
                  "canonicalReference": "@veramo/core-types!IResolver:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "methods",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@veramo/did-resolver!DIDResolverPlugin#resolveDid:member(1)",
              "docComment": "/**\n * {@inheritDoc @veramo/core-types#IResolver.resolveDid}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolveDid({ didUrl, options, }: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        didUrl: string;\n        options?: "
                },
                {
                  "kind": "Reference",
                  "text": "DIDResolutionOptions",
                  "canonicalReference": "did-resolver!DIDResolutionOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "DIDResolutionResult",
                  "canonicalReference": "did-resolver!DIDResolutionResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ didUrl, options, }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "resolveDid"
            },
            {
              "kind": "Property",
              "canonicalReference": "@veramo/did-resolver!DIDResolverPlugin#schema:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly schema: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        components: {\n            schemas: {\n                GetDIDComponentArgs: {\n                    type: string;\n                    properties: {\n                        didDocument: {\n                            $ref: string;\n                            description: string;\n                        };\n                        didUrl: {\n                            type: string;\n                            description: string;\n                        };\n                        section: {\n                            $ref: string;\n                            description: string;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                DIDDocument: {\n                    type: string;\n                    properties: {\n                        authentication: {\n                            type: string;\n                            items: {\n                                anyOf: ({\n                                    type: string;\n                                    $ref?: undefined;\n                                } | {\n                                    $ref: string;\n                                    type?: undefined;\n                                })[];\n                            };\n                        };\n                        assertionMethod: {\n                            type: string;\n                            items: {\n                                anyOf: ({\n                                    type: string;\n                                    $ref?: undefined;\n                                } | {\n                                    $ref: string;\n                                    type?: undefined;\n                                })[];\n                            };\n                        };\n                        keyAgreement: {\n                            type: string;\n                            items: {\n                                anyOf: ({\n                                    type: string;\n                                    $ref?: undefined;\n                                } | {\n                                    $ref: string;\n                                    type?: undefined;\n                                })[];\n                            };\n                        };\n                        capabilityInvocation: {\n                            type: string;\n                            items: {\n                                anyOf: ({\n                                    type: string;\n                                    $ref?: undefined;\n                                } | {\n                                    $ref: string;\n                                    type?: undefined;\n                                })[];\n                            };\n                        };\n                        capabilityDelegation: {\n                            type: string;\n                            items: {\n                                anyOf: ({\n                                    type: string;\n                                    $ref?: undefined;\n                                } | {\n                                    $ref: string;\n                                    type?: undefined;\n                                })[];\n                            };\n                        };\n                        \"@context\": {\n                            anyOf: ({\n                                type: string;\n                                const: string;\n                                items?: undefined;\n                            } | {\n                                type: string;\n                                const?: undefined;\n                                items?: undefined;\n                            } | {\n                                type: string;\n                                items: {\n                                    type: string;\n                                };\n                                const?: undefined;\n                            })[];\n                        };\n                        id: {\n                            type: string;\n                        };\n                        alsoKnownAs: {\n                            type: string;\n                            items: {\n                                type: string;\n                            };\n                        };\n                        controller: {\n                            anyOf: ({\n                                type: string;\n                                items?: undefined;\n                            } | {\n                                type: string;\n                                items: {\n                                    type: string;\n                                };\n                            })[];\n                        };\n                        verificationMethod: {\n                            type: string;\n                            items: {\n                                $ref: string;\n                            };\n                        };\n                        service: {\n                            type: string;\n                            items: {\n                                $ref: string;\n                            };\n                        };\n                        publicKey: {\n                            type: string;\n                            items: {\n                                $ref: string;\n                            };\n                            deprecated: boolean;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                VerificationMethod: {\n                    type: string;\n                    properties: {\n                        id: {\n                            type: string;\n                        };\n                        type: {\n                            type: string;\n                        };\n                        controller: {\n                            type: string;\n                        };\n                        publicKeyBase58: {\n                            type: string;\n                        };\n                        publicKeyBase64: {\n                            type: string;\n                        };\n                        publicKeyJwk: {\n                            $ref: string;\n                        };\n                        publicKeyHex: {\n                            type: string;\n                        };\n                        publicKeyMultibase: {\n                            type: string;\n                        };\n                        blockchainAccountId: {\n                            type: string;\n                        };\n                        ethereumAddress: {\n                            type: string;\n                        };\n                        conditionOr: {\n                            type: string;\n                            items: {\n                                $ref: string;\n                            };\n                        };\n                        conditionAnd: {\n                            type: string;\n                            items: {\n                                $ref: string;\n                            };\n                        };\n                        threshold: {\n                            type: string;\n                        };\n                        conditionThreshold: {\n                            type: string;\n                            items: {\n                                $ref: string;\n                            };\n                        };\n                        conditionWeightedThreshold: {\n                            type: string;\n                            items: {\n                                $ref: string;\n                            };\n                        };\n                        conditionDelegated: {\n                            type: string;\n                        };\n                        relationshipParent: {\n                            type: string;\n                            items: {\n                                type: string;\n                            };\n                        };\n                        relationshipChild: {\n                            type: string;\n                            items: {\n                                type: string;\n                            };\n                        };\n                        relationshipSibling: {\n                            type: string;\n                            items: {\n                                type: string;\n                            };\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                JsonWebKey: {\n                    type: string;\n                    properties: {\n                        alg: {\n                            type: string;\n                        };\n                        crv: {\n                            type: string;\n                        };\n                        e: {\n                            type: string;\n                        };\n                        ext: {\n                            type: string;\n                        };\n                        key_ops: {\n                            type: string;\n                            items: {\n                                type: string;\n                            };\n                        };\n                        kid: {\n                            type: string;\n                        };\n                        kty: {\n                            type: string;\n                        };\n                        n: {\n                            type: string;\n                        };\n                        use: {\n                            type: string;\n                        };\n                        x: {\n                            type: string;\n                        };\n                        y: {\n                            type: string;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                ConditionWeightedThreshold: {\n                    type: string;\n                    properties: {\n                        condition: {\n                            $ref: string;\n                        };\n                        weight: {\n                            type: string;\n                        };\n                    };\n                    required: string[];\n                };\n                Service: {\n                    type: string;\n                    properties: {\n                        id: {\n                            type: string;\n                        };\n                        type: {\n                            type: string;\n                        };\n                        serviceEndpoint: {\n                            anyOf: ({\n                                $ref: string;\n                                type?: undefined;\n                                items?: undefined;\n                            } | {\n                                type: string;\n                                items: {\n                                    $ref: string;\n                                };\n                                $ref?: undefined;\n                            })[];\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                ServiceEndpoint: {\n                    anyOf: {\n                        type: string;\n                    }[];\n                    description: string;\n                };\n                DIDDocumentSection: {\n                    anyOf: ({\n                        $ref: string;\n                        type?: undefined;\n                        const?: undefined;\n                    } | {\n                        type: string;\n                        const: string;\n                        $ref?: undefined;\n                    })[];\n                    description: string;\n                };\n                KeyCapabilitySection: {\n                    type: string;\n                    enum: string[];\n                    description: string;\n                };\n                DIDDocComponent: {\n                    anyOf: {\n                        $ref: string;\n                    }[];\n                    description: string;\n                };\n                ResolveDidArgs: {\n                    type: string;\n                    properties: {\n                        didUrl: {\n                            type: string;\n                            description: string;\n                        };\n                        options: {\n                            $ref: string;\n                            description: string;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                DIDResolutionOptions: {\n                    type: string;\n                    properties: {\n                        accept: {\n                            type: string;\n                        };\n                    };\n                    description: string;\n                };\n                DIDResolutionResult: {\n                    type: string;\n                    properties: {\n                        \"@context\": {\n                            anyOf: ({\n                                type: string;\n                                const: string;\n                                items?: undefined;\n                            } | {\n                                type: string;\n                                const?: undefined;\n                                items?: undefined;\n                            } | {\n                                type: string;\n                                items: {\n                                    type: string;\n                                };\n                                const?: undefined;\n                            })[];\n                        };\n                        didResolutionMetadata: {\n                            $ref: string;\n                        };\n                        didDocument: {\n                            anyOf: ({\n                                $ref: string;\n                                type?: undefined;\n                            } | {\n                                type: string;\n                                $ref?: undefined;\n                            })[];\n                        };\n                        didDocumentMetadata: {\n                            $ref: string;\n                        };\n                    };\n                    required: string[];\n                    description: string;\n                };\n                DIDResolutionMetadata: {\n                    type: string;\n                    properties: {\n                        contentType: {\n                            type: string;\n                        };\n                        error: {\n                            type: string;\n                        };\n                    };\n                    description: string;\n                };\n                DIDDocumentMetadata: {\n                    type: string;\n                    properties: {\n                        created: {\n                            type: string;\n                        };\n                        updated: {\n                            type: string;\n                        };\n                        deactivated: {\n                            type: string;\n                        };\n                        versionId: {\n                            type: string;\n                        };\n                        nextUpdate: {\n                            type: string;\n                        };\n                        nextVersionId: {\n                            type: string;\n                        };\n                        equivalentId: {\n                            type: string;\n                        };\n                        canonicalId: {\n                            type: string;\n                        };\n                    };\n                    description: string;\n                };\n            };\n            methods: {\n                getDIDComponentById: {\n                    description: string;\n                    arguments: {\n                        $ref: string;\n                    };\n                    returnType: {\n                        $ref: string;\n                    };\n                };\n                resolveDid: {\n                    description: string;\n                    arguments: {\n                        $ref: string;\n                    };\n                    returnType: {\n                        $ref: string;\n                    };\n                };\n            };\n        };\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "schema",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@veramo/did-resolver!getUniversalResolver:function(1)",
          "docComment": "/**\n * Creates a DIDResolver instance that can be used with `did-resolver`\n *\n * @param url - the URL for the universal resolver instance (See https://uniresolver.io )\n *\n * @returns `DIDResolver`\n *\n * @example\n * ```typescript\n * const uniResolver = getUniversalResolver()\n * const resolver = new Resolver({\n *   web: uniResolver,\n *   key: uniResolver,\n *   elem: uniResolver\n * })\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getUniversalResolver(url?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DIDResolver",
              "canonicalReference": "did-resolver!DIDResolver:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/universal-resolver.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getUniversalResolver"
        },
        {
          "kind": "Function",
          "canonicalReference": "@veramo/did-resolver!getUniversalResolverFor:function(1)",
          "docComment": "/**\n * Creates a mapping of DID methods to a DIDResolver instance that can be used with `did-resolver`\n *\n * @param methods - an array of DID methods that should be resolved by this universal resolver\n *\n * @param url - the URL for the universal resolver instance (See https://uniresolver.io )\n *\n * @returns `Record<string, DIDResolver>` a mapping of the given methods to an instance of `DIDResolver`\n *\n * @example\n * ```typescript\n * const uniResolver = getUniversalResolverFor(['web', 'key', 'elem'])\n * const resolver = new Resolver({\n *   ...uniResolver,\n *   // other resolvers\n * })\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getUniversalResolverFor(methods: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", url?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "DIDResolver",
              "canonicalReference": "did-resolver!DIDResolver:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/universal-resolver.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "methods",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getUniversalResolverFor"
        }
      ]
    }
  ]
}
